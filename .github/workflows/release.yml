name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      target:
        description: 'Build target'
        required: true
        default: 'github'
        type: choice
        options:
        - github
        - appstore
        - both

jobs:
  build-github:
    if: ${{ github.event.inputs.target == 'github' || github.event.inputs.target == 'both' || github.event.inputs.target == '' }}
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Import certificates
      env:
        DEVELOPER_ID_APPLICATION_P12: ${{ secrets.DEVELOPER_ID_APPLICATION_P12 }}
        DEVELOPER_ID_INSTALLER_P12: ${{ secrets.DEVELOPER_ID_INSTALLER_P12 }}
        CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
      run: |
        # Create temporary keychain
        KEYCHAIN_NAME="build.keychain"
        KEYCHAIN_PASSWORD="temp-password"
        
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | tr -d '"')
        
        # Import certificates
        if [ ! -z "$DEVELOPER_ID_APPLICATION_P12" ]; then
          echo "$DEVELOPER_ID_APPLICATION_P12" | base64 --decode > app-cert.p12
          security import app-cert.p12 -k "$KEYCHAIN_NAME" -P "$CERTIFICATES_PASSWORD" -T /usr/bin/codesign
          rm app-cert.p12
        fi
        
        if [ ! -z "$DEVELOPER_ID_INSTALLER_P12" ]; then
          echo "$DEVELOPER_ID_INSTALLER_P12" | base64 --decode > installer-cert.p12
          security import installer-cert.p12 -k "$KEYCHAIN_NAME" -P "$CERTIFICATES_PASSWORD" -T /usr/bin/productbuild
          rm installer-cert.p12
        fi
        
        # Set partition list for codesign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
    
    - name: Configure signing identities
      env:
        DEVELOPER_ID_NAME: ${{ secrets.DEVELOPER_ID_NAME }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        if [ ! -z "$DEVELOPER_ID_NAME" ]; then
          echo "DEVELOPER_ID_APPLICATION=Developer ID Application: $DEVELOPER_ID_NAME" >> $GITHUB_ENV
          echo "DEVELOPER_ID_INSTALLER=Developer ID Installer: $DEVELOPER_ID_NAME" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=$APPLE_TEAM_ID" >> $GITHUB_ENV
        fi
    
    - name: Build signed app
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
        ASC_PROVIDER: ${{ secrets.ASC_PROVIDER }}
      run: |
        if [ -z "$DEVELOPER_ID_APPLICATION" ]; then
          echo "No signing certificates - building unsigned"
          python scripts/build_app.py --target github --skip-signing
        else
          echo "Building with code signing and notarization"
          python scripts/build_app.py --target github
        fi
    
    - name: Create DMG
      run: |
        ./scripts/test_dmg_creation.sh
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Rephrasely ${{ steps.version.outputs.VERSION }}
        body: |
          ## What's New
          
          - Enhanced AI-powered text processing
          - Native macOS interface with proper code signing
          - Improved security and Gatekeeper compatibility
          
          ## Installation
          
          1. Download `Rephrasely-${{ steps.version.outputs.VERSION }}.dmg`
          2. Open the DMG file
          3. Drag Rephrasely.app to your Applications folder
          4. Launch Rephrasely and configure your OpenAI API key
          
          ## System Requirements
          
          - macOS 10.14 or later
          - OpenAI API key (get one at https://platform.openai.com/api-keys)
        draft: false
        prerelease: false
    
    - name: Upload DMG
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/dmg/Rephrasely-${{ steps.version.outputs.VERSION }}.dmg
        asset_name: Rephrasely-${{ steps.version.outputs.VERSION }}.dmg
        asset_content_type: application/octet-stream
    
    - name: Cleanup keychain
      if: always()
      run: |
        if security list-keychains | grep -q "build.keychain"; then
          security delete-keychain build.keychain
        fi

  build-appstore:
    if: ${{ github.event.inputs.target == 'appstore' || github.event.inputs.target == 'both' }}
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Import App Store certificates
      env:
        MAC_APP_STORE_P12: ${{ secrets.MAC_APP_STORE_P12 }}
        MAC_INSTALLER_P12: ${{ secrets.MAC_INSTALLER_P12 }}
        CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
      run: |
        # Create temporary keychain
        KEYCHAIN_NAME="appstore.keychain"
        KEYCHAIN_PASSWORD="temp-password"
        
        security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
        security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | tr -d '"')
        
        # Import certificates
        if [ ! -z "$MAC_APP_STORE_P12" ]; then
          echo "$MAC_APP_STORE_P12" | base64 --decode > appstore-app-cert.p12
          security import appstore-app-cert.p12 -k "$KEYCHAIN_NAME" -P "$CERTIFICATES_PASSWORD" -T /usr/bin/codesign
          rm appstore-app-cert.p12
        fi
        
        if [ ! -z "$MAC_INSTALLER_P12" ]; then
          echo "$MAC_INSTALLER_P12" | base64 --decode > appstore-installer-cert.p12
          security import appstore-installer-cert.p12 -k "$KEYCHAIN_NAME" -P "$CERTIFICATES_PASSWORD" -T /usr/bin/productbuild
          rm appstore-installer-cert.p12
        fi
        
        # Set partition list
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
    
    - name: Configure App Store signing
      env:
        MAC_APP_STORE_NAME: ${{ secrets.MAC_APP_STORE_NAME }}
        MAC_INSTALLER_NAME: ${{ secrets.MAC_INSTALLER_NAME }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        if [ ! -z "$MAC_APP_STORE_NAME" ]; then
          echo "MAC_APP_STORE_CERTIFICATE=3rd Party Mac Developer Application: $MAC_APP_STORE_NAME" >> $GITHUB_ENV
          echo "MAC_INSTALLER_CERTIFICATE=3rd Party Mac Developer Installer: $MAC_INSTALLER_NAME" >> $GITHUB_ENV
          echo "APPLE_TEAM_ID=$APPLE_TEAM_ID" >> $GITHUB_ENV
        fi
    
    - name: Setup App Store Connect API
      env:
        ASC_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
        ASC_API_ISSUER_ID: ${{ secrets.ASC_API_ISSUER_ID }}
        ASC_API_KEY_CONTENT: ${{ secrets.ASC_API_KEY_CONTENT }}
      run: |
        if [ ! -z "$ASC_API_KEY_CONTENT" ]; then
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$ASC_API_KEY_CONTENT" > ~/.appstoreconnect/private_keys/AuthKey_$ASC_API_KEY_ID.p8
          echo "ASC_API_KEY_PATH=~/.appstoreconnect/private_keys/AuthKey_$ASC_API_KEY_ID.p8" >> $GITHUB_ENV
          echo "ASC_API_KEY_ID=$ASC_API_KEY_ID" >> $GITHUB_ENV
          echo "ASC_API_ISSUER_ID=$ASC_API_ISSUER_ID" >> $GITHUB_ENV
        fi
    
    - name: Build and upload to App Store
      run: |
        if [ -z "$MAC_APP_STORE_CERTIFICATE" ]; then
          echo "No App Store certificates - cannot build for App Store"
          exit 1
        else
          echo "Building for App Store with upload"
          python scripts/build_app.py --target appstore
        fi
    
    - name: Cleanup keychain
      if: always()
      run: |
        if security list-keychains | grep -q "appstore.keychain"; then
          security delete-keychain appstore.keychain
        fi 