#!/bin/bash

# Potter Pre-commit Hook
# Runs tests to verify functionality before commit

set -e  # Exit on any error

echo "üß™ Potter Pre-commit Test Hook"
echo "=================================================="

# Get the current branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "üìç Current branch: $BRANCH"

# Check if any significant files changed
PYTHON_FILES_CHANGED=$(git diff --cached --name-only | grep -E '\.(py)$' | wc -l)
CONFIG_FILES_CHANGED=$(git diff --cached --name-only | grep -E '(requirements\.txt|\.spec|setup\.py)' | wc -l)

echo "üìã Files changed: $PYTHON_FILES_CHANGED Python, $CONFIG_FILES_CHANGED config"

# Run tests if Python files or config files changed
if [[ $PYTHON_FILES_CHANGED -gt 0 ]] || [[ $CONFIG_FILES_CHANGED -gt 0 ]]; then
    echo ""
    echo "üîç Running pre-commit tests..."
    
    # Set up test environment
    TEST_DIR="test_scripts"
    FAILED_TESTS=0
    
    # Run setup validation test
    echo ""
    echo "1Ô∏è‚É£ Testing setup and dependencies..."
    if ! python "$TEST_DIR/test_setup.py"; then
        echo "‚ùå Setup test failed"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    else
        echo "‚úÖ Setup test passed"
    fi
    
    # Run debug/dependency test
    echo ""
    echo "2Ô∏è‚É£ Testing dependencies..."
    if ! python "$TEST_DIR/debug_test.py"; then
        echo "‚ùå Dependency test failed"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    else
        echo "‚úÖ Dependency test passed"
    fi
    
    # Run UI test (if available)
    if [[ -f "$TEST_DIR/test_ui.py" ]]; then
        echo ""
        echo "3Ô∏è‚É£ Testing UI components..."
        if ! python "$TEST_DIR/test_ui.py"; then
            echo "‚ùå UI test failed"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        else
            echo "‚úÖ UI test passed"
        fi
    fi
    
    # Run settings migration test (if available)
    if [[ -f "$TEST_DIR/test_settings_migration.py" ]]; then
        echo ""
        echo "4Ô∏è‚É£ Testing settings migration..."
        if ! python "$TEST_DIR/test_settings_migration.py"; then
            echo "‚ùå Settings migration test failed"
            FAILED_TESTS=$((FAILED_TESTS + 1))
        else
            echo "‚úÖ Settings migration test passed"
        fi
    fi
    
    # Basic Python syntax check for changed files
    echo ""
    echo "4Ô∏è‚É£ Checking Python syntax..."
    CHANGED_PY_FILES=$(git diff --cached --name-only | grep -E '\.(py)$')
    SYNTAX_ERRORS=0
    
    for file in $CHANGED_PY_FILES; do
        if [[ -f "$file" ]]; then
            if ! python -m py_compile "$file" 2>/dev/null; then
                echo "‚ùå Syntax error in: $file"
                SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
            fi
        fi
    done
    
    if [[ $SYNTAX_ERRORS -gt 0 ]]; then
        echo "‚ùå Found $SYNTAX_ERRORS Python syntax error(s)"
        FAILED_TESTS=$((FAILED_TESTS + 1))
    else
        echo "‚úÖ Python syntax check passed"
    fi
    
    # Final result
    echo ""
    echo "=================================================="
    if [[ $FAILED_TESTS -gt 0 ]]; then
        echo "‚ùå $FAILED_TESTS test(s) failed. Please fix issues before committing."
        exit 1
    else
        echo "‚úÖ All tests passed! Proceeding with commit."
    fi
else
    echo "‚ÑπÔ∏è  No Python or config files changed - skipping tests"
fi

# Helpful reminders for release branches
if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
    echo ""
    echo "üí° Committing to $BRANCH branch:"
    echo "   ‚Ä¢ Consider creating a release after this commit"
    echo "   ‚Ä¢ Update version numbers if needed"
    echo "   ‚Ä¢ Check CHANGELOG.md is updated"
fi

echo ""
echo "üéâ Pre-commit hook completed successfully!"
exit 0 