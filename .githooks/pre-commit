#!/bin/bash

# Rephrasely Pre-commit Hook
# Automatically creates GitHub releases when committing to main branch

echo "üîç Rephrasely Pre-commit Hook"

# Get the current branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "üìç Current branch: $BRANCH"

# Only process main/master branch
if [[ "$BRANCH" != "main" && "$BRANCH" != "master" ]]; then
    echo "‚è≠Ô∏è  Skipping release check - not on main/master branch"
    exit 0
fi

# Check if any significant files changed
PYTHON_FILES_CHANGED=$(git diff --cached --name-only | grep -E '\.(py)$' | wc -l)
CONFIG_FILES_CHANGED=$(git diff --cached --name-only | grep -E '(requirements\.txt|build_app\.py|assets/)' | wc -l)
RELEASE_FILES_CHANGED=$(git diff --cached --name-only | grep -E '(README\.md|CHANGELOG\.md|VERSION)' | wc -l)

TOTAL_CHANGES=$((PYTHON_FILES_CHANGED + CONFIG_FILES_CHANGED + RELEASE_FILES_CHANGED))

if [[ $TOTAL_CHANGES -eq 0 ]]; then
    echo "‚è≠Ô∏è  Skipping release check - no significant files changed"
    exit 0
fi

echo "üìã Files changed: $PYTHON_FILES_CHANGED Python, $CONFIG_FILES_CHANGED config, $RELEASE_FILES_CHANGED docs"

# Check if GitHub CLI is available
if ! command -v gh &> /dev/null; then
    echo "‚ö†Ô∏è  GitHub CLI not found - skipping automatic release"
    echo "   Install with: brew install gh"
    echo "   Or manually create releases using: scripts/create_github_release.sh"
    exit 0
fi

# Check if authenticated
if ! gh auth status &> /dev/null; then
    echo "‚ö†Ô∏è  Not authenticated with GitHub CLI - skipping automatic release"
    echo "   Run: gh auth login"
    echo "   Or manually create releases using: scripts/create_github_release.sh"
    exit 0
fi

# Get project root
PROJECT_ROOT="$(git rev-parse --show-toplevel)"
cd "$PROJECT_ROOT"

# Check if this commit should trigger a release
COMMIT_MSG=$(git log --format=%B -n 1 HEAD 2>/dev/null || echo "")
SHOULD_RELEASE=false

# Check commit message for release indicators
if echo "$COMMIT_MSG" | grep -qE "(release|version|v[0-9]+\.[0-9]+)" -i; then
    SHOULD_RELEASE=true
    echo "üè∑Ô∏è  Release indicators found in commit message"
elif [[ $PYTHON_FILES_CHANGED -gt 0 ]]; then
    # Ask user if they want to create a release for Python changes
    echo "ü§î Python files changed. Create a GitHub release? (y/N)"
    echo "   This will build the app and upload to GitHub Releases"
    read -p "Create release? " -t 10 CREATE_RELEASE
    
    if [[ "$CREATE_RELEASE" =~ ^[Yy]$ ]]; then
        SHOULD_RELEASE=true
    else
        echo "‚è≠Ô∏è  Skipping release creation"
    fi
fi

if [[ "$SHOULD_RELEASE" == "true" ]]; then
    echo "üöÄ Creating GitHub release..."
    
    # Run the GitHub release creation script
    if [[ -x "scripts/create_github_release.sh" ]]; then
        echo "üì¶ Running GitHub release script..."
        
        # Run the script in a way that preserves user interaction
        if scripts/create_github_release.sh; then
            echo "‚úÖ GitHub release created successfully"
            echo "üîó Check GitHub Releases page for the new release"
        else
            echo "‚ùå GitHub release creation failed"
            echo "‚ö†Ô∏è  You can manually create a release later with:"
            echo "   scripts/create_github_release.sh"
            echo ""
            echo "Do you want to continue with the commit anyway? (y/N)"
            read -p "Continue? " CONTINUE_COMMIT
            
            if [[ ! "$CONTINUE_COMMIT" =~ ^[Yy]$ ]]; then
                echo "‚ùå Commit aborted"
                exit 1
            fi
        fi
    else
        echo "‚ùå GitHub release script not found or not executable"
        echo "   Expected: scripts/create_github_release.sh"
        echo "   Continuing with commit..."
    fi
else
    echo "‚è≠Ô∏è  No release needed for this commit"
    echo "üí° To manually create a release later, run:"
    echo "   scripts/create_github_release.sh"
fi

echo "‚ú® Pre-commit hook completed successfully"
exit 0 