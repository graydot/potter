#!/bin/bash

# Rephrasely Pre-commit Hook
# Basic validation and checks before commit

echo "üîç Rephrasely Pre-commit Hook"

# Get the current branch
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo "üìç Current branch: $BRANCH"

# Check if any significant files changed
PYTHON_FILES_CHANGED=$(git diff --cached --name-only | grep -E '\.(py)$' | wc -l)
CONFIG_FILES_CHANGED=$(git diff --cached --name-only | grep -E '(requirements\.txt|build_app\.py|assets/)' | wc -l)
RELEASE_FILES_CHANGED=$(git diff --cached --name-only | grep -E '(README\.md|CHANGELOG\.md|VERSION)' | wc -l)

TOTAL_CHANGES=$((PYTHON_FILES_CHANGED + CONFIG_FILES_CHANGED + RELEASE_FILES_CHANGED))

echo "üìã Files changed: $PYTHON_FILES_CHANGED Python, $CONFIG_FILES_CHANGED config, $RELEASE_FILES_CHANGED docs"

# Basic syntax check for Python files if any were changed
if [[ $PYTHON_FILES_CHANGED -gt 0 ]]; then
    echo "üêç Checking Python syntax..."
    
    # Get list of changed Python files
    CHANGED_PY_FILES=$(git diff --cached --name-only | grep -E '\.(py)$')
    
    # Check syntax for each file
    SYNTAX_ERRORS=0
    for file in $CHANGED_PY_FILES; do
        if [[ -f "$file" ]]; then
            if ! python -m py_compile "$file" 2>/dev/null; then
                echo "‚ùå Syntax error in: $file"
                SYNTAX_ERRORS=$((SYNTAX_ERRORS + 1))
            fi
        fi
    done
    
    if [[ $SYNTAX_ERRORS -gt 0 ]]; then
        echo "‚ùå Found $SYNTAX_ERRORS Python syntax error(s). Please fix before committing."
        exit 1
    else
        echo "‚úÖ Python syntax check passed"
    fi
fi

# Remind about manual releases for main/master branch
if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]] && [[ $TOTAL_CHANGES -gt 0 ]]; then
    echo "üí° Remember to create a release manually when ready:"
    echo "   scripts/manual_release.sh"
fi

echo "‚ú® Pre-commit hook completed successfully"
exit 0 